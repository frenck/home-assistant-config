---
# This is my Sunlight script. It uses the custom Ciradian Lighting integration.
#
# The Circadian Lighting integration is very nice, but fails to handle lights
# correctly when they turn off or are handled by groups. After I got sick of it
# I wrote this little script.
#
# This script allows one to apply the "Sun" to any light, at any moment. It
# checks if the target lights support color, color temperature or just
# brightness and applies the correct values that belong to the light.
#
# This script is a one-shot. It does not keep the light updated, which was my
# goal. Home Assistant has automations, I can just call it more often.
#
# It offers 2 transition settings: `transition` that is used for regular
# transitions and the `turn_on_transition` which is used then the light is
# turned on.
#
# By default it will not turn on a light, `turn_on` has to be set to true to
# do that. This allows this script to be called without turning on a light that
# is currently set to off.
#
# Used integration: https://github.com/claytonjn/hass-circadian_lighting
#
# Example: Set sunlight, without turning it on
#
# - service: script.turn_on
#   entity_id: script.sunlight
#   data:
#    entities: [light.living_room, light.kitchen]
#
# Example: Set sunlight, turning it on when off, custom turn on transition
#
# - service: script.turn_on
#   entity_id: script.sunlight
#   data:
#    entities: [light.living_room]
#    turn_on: true
#    turn_on_transition: 10
#
alias: sunlight
description: Applies the current state of the sun (circadian lighting) to given entities
mode: parallel
max: 100

fields:
  entities:
    description: The entities to apply the sun on (list)
    example: "[light.living_room, light.kitchen]"
  transition:
    description: Transition time for changes (optional, default 5)
    example: 1.5
  turn_on:
    description: Allow this script to turn on the light (optional, default false)
    example: true
  turn_on_transition:
    description: Transition time to use when turning on the light (optional, default 2)
    example: 1.5
  min_brightness:
    description: The min brightness of the entity (optional 1-100, default 1)
    example: 10
  max_brightness:
    description: The max brightness of the entity (optional 1-100, default 100)
    example: 90

variables:
  circadian: sensor.circadian_values
  min_brightness: "{{ min_brightness | default(1) }}"
  max_brightness: "{{ max_brightness | default(100) }}"
  brightness: >-
    {% set percent = states('sensor.circadian_values') | float %}
    {% if percent > 0 %}
      {{ max_brightness | round }}
    {% else %}
      {{ ((max_brightness - min_brightness) * ((100 + percent) / 100)) + min_brightness | round }}
    {% endif %}
  color_temp: "{{ state_attr(circadian, 'colortemp') | int }}"
  red: "{{ state_attr(circadian, 'rgb_color')[0] | int }}"
  green: "{{ state_attr(circadian, 'rgb_color')[1] | int }}"
  blue: "{{ state_attr(circadian, 'rgb_color')[2] | int }}"
  transition: "{{ transition | default(5) }}"
  turn_on: "{{ turn_on | default(false) }}"
  turn_on_transition: "{{ turn_on_transition | default(2) }}"

sequence:
  - repeat:
      count: "{{ entities | length }}"
      sequence:
        - variables:
            entity: "{{ entities[repeat.index-1] }}"
        - condition: template
          value_template: "{{ turn_on is sameas true or is_state(entity, 'on') }}"
        - variables:
            supports_color: >-
              {{ state_attr(entity, 'supported_features') | bitwise_and(16) == 16 }}
            supports_color_temp: >-
              {{ state_attr(entity, 'supported_features') | bitwise_and(2) == 2 }}
            entity_transition: >-
              {% if is_state(entity, 'on') %}
                {{ transition }}
              {% else %}
                {{ turn_on_transition }}
              {% endif %}
        - choose:
            - conditions: "{{ supports_color }}"
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: "{{ entity }}"
                    brightness_pct: "{{ brightness }}"
                    transition: "{{ entity_transition }}"
                    rgb_color: ["{{ red }}", "{{ green }}", "{{ blue }}"]
            - conditions: "{{ supports_color_temp }}"
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: "{{ entity }}"
                    brightness_pct: "{{ brightness }}"
                    transition: "{{ entity_transition }}"
                    color_temp: "{{ color_temp }}"
          default:
            - service: light.turn_on
              data:
                entity_id: "{{ entity }}"
                brightness_pct: "{{ brightness }}"
                transition: "{{ entity_transition }}"
